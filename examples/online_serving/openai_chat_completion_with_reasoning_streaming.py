from openai import OpenAI
'\nAn example shows how to generate chat completions from reasoning models\nlike DeepSeekR1.\n\nTo run this example, you need to start the vLLM server with the reasoning\nparser:\n\n```bash\nvllm serve deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B      --reasoning-parser deepseek_r1\n```\n\nUnlike openai_chat_completion_with_reasoning.py, this example demonstrates the\nstreaming chat completions feature.\n\nThe streaming chat completions feature allows you to receive chat completions\nin real-time as they are generated by the model. This is useful for scenarios\nwhere you want to display chat completions to the user as they are generated\nby the model.\n\nRemember to check content and reasoning_content exist in `ChatCompletionChunk`,\ncontent may not exist leading to errors if you try to access it.\n'
openai_api_key = 'EMPTY'
openai_api_base = 'http://localhost:8000/v1'
messages = [{'role': 'user', 'content': '9.11 and 9.8, which is greater?'}]

def main():
    client = OpenAI(api_key=openai_api_key, base_url=openai_api_base)
    models = client.models.list()
    model = models.data[0].id
    stream = client.chat.completions.create(model=model, messages=messages, stream=True)
    print('client: Start streaming chat completions...')
    printed_reasoning_content = False
    printed_content = False
    for chunk in stream:
        reasoning_content = None
        content = None
        if hasattr(chunk.choices[0].delta, 'reasoning_content'):
            reasoning_content = chunk.choices[0].delta.reasoning_content
        elif hasattr(chunk.choices[0].delta, 'content'):
            content = chunk.choices[0].delta.content
        if reasoning_content is not None:
            if not printed_reasoning_content:
                printed_reasoning_content = True
                print('reasoning_content:', end='', flush=True)
            print(reasoning_content, end='', flush=True)
        elif content is not None:
            if not printed_content:
                printed_content = True
                print('\ncontent:', end='', flush=True)
            print(content, end='', flush=True)
if __name__ == '__main__':
    main()